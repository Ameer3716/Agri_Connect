name: CI - Build Docker Images for Docker Hub

on:
  push:
    branches:
      - main # Build images on push to main
      - develop # And/or on push to develop
      # Add any other branches you want to build images for
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - 'backend2/api-gateway/**'
      - 'backend2/auth-service/**'
      - 'backend2/main-service/**'
      - '.github/workflows/ci.yml' # MAKE SURE THIS MATCHES YOUR FILENAME

env:
  # For Docker Hub, the image prefix will be your username
  # This is set in the metadata action directly
  NODE_VERSION: '18'

jobs:
  lint-and-test:
    name: Lint & Test - ${{ matrix.service_config.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service_config:
          - name: frontend
            path: ./frontend
            cache_path: frontend/package-lock.json
            lint_script: lint
            test_env:
              VITE_API_URL: http://mock-gateway.test/api
          - name: api-gateway
            path: ./backend2/api-gateway
            cache_path: backend2/api-gateway/package-lock.json
            test_env:
              NODE_ENV: test
              API_GATEWAY_PORT: 5000
              AUTH_SERVICE_URL: http://mock-auth-service.test
              MAIN_SERVICE_URL: http://mock-main-service.test
              FRONTEND_URL: http://mock-frontend.test
          - name: auth-service
            path: ./backend2/auth-service
            cache_path: backend2/auth-service/package-lock.json
            test_env:
              NODE_ENV: test
              PORT: 5001
              MONGO_URI: mongodb://localhost:27017/test_auth_db_dummy
              JWT_SECRET: testjwtsecretforauthserviceci
              SESSION_SECRET: testsessionsecretforauthci
              REDIS_HOST: mockredis
              REDIS_PORT: 6379
              EMAIL_USER: test@example.com
              EMAIL_PASS: testpass
              GOOGLE_CLIENT_ID: testgoogleclientidci
              GOOGLE_CLIENT_SECRET: testgoogleclientsecretci
              GOOGLE_CALLBACK_URL: http://localhost:5000/api/auth/google/callback
              FRONTEND_URL: http://localhost:7000
          - name: main-service
            path: ./backend2/main-service
            cache_path: backend2/main-service/package-lock.json
            test_env:
              NODE_ENV: test
              PORT: 5002
              MONGO_URI: mongodb://localhost:27017/test_main_db_dummy
              MYSQL_HOST: mockmysql
              MYSQL_USER: testuser
              MYSQL_PASSWORD: testpassword
              MYSQL_DATABASE: testdb_dummy
              JWT_SECRET: testjwtsecretformainserviceci
              AUTH_SERVICE_URL: http://mock-auth-service.test
              API_GATEWAY_PORT: 5000
              FRONTEND_URL: http://localhost:5173
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service_config.cache_path }}

      - name: Install Dependencies for ${{ matrix.service_config.name }}
        working-directory: ${{ matrix.service_config.path }}
        run: npm ci

      - name: Lint - ${{ matrix.service_config.name }}
        if: matrix.service_config.lint_script
        working-directory: ${{ matrix.service_config.path }}
        run: npm run ${{ matrix.service_config.lint_script }}

      - name: Run Tests - ${{ matrix.service_config.name }}
        working-directory: ${{ matrix.service_config.path }}
        env: ${{ matrix.service_config.test_env }}
        run: npm test

  build-and-push-images:
    name: Build & Push Docker Images to Docker Hub
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: lint-and-test
    permissions:
      contents: read

    strategy:
      matrix:
        service_config:
          - name: frontend
            image_suffix: frontend
            path: ./frontend
            dockerfile: ./frontend/Dockerfile
            build_args: | # UPDATED LINE FOR ROBUST SECRET FALLBACK
              VITE_API_URL=${{ secrets.BUILD_VITE_API_URL && secrets.BUILD_VITE_API_URL || 'http://localhost:5000/api' }}
          - name: api-gateway
            image_suffix: api-gateway
            path: ./backend2/api-gateway
            dockerfile: ./backend2/api-gateway/Dockerfile
            build_args: ""
          - name: auth-service
            image_suffix: auth-service
            path: ./backend2/auth-service
            dockerfile: ./backend2/auth-service/Dockerfile
            build_args: ""
          - name: main-service
            image_suffix: main-service
            path: ./backend2/main-service
            dockerfile: ./backend2/main-service/Dockerfile
            build_args: ""
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service_config.image_suffix }}
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}

      - name: Build and push Docker image for ${{ matrix.service_config.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service_config.path }}
          file: ${{ matrix.service_config.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.service_config.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max