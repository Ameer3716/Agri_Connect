name: CI - Build Docker Images for Docker Hub

on:
  push:
    branches:
      - main # Build images on push to main
      - develop # And/or on push to develop
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'agri-connect-frontend/**'
      - 'backend2/api-gateway/**'
      - 'backend2/auth-service/**'
      - 'backend2/main-service/**'
      - '.github/workflows/ci-cd.yml' # ENSURE THIS MATCHES YOUR ACTUAL FILENAME

env:
  NODE_VERSION: '18'
  # Define BUILD_VITE_API_URL here for the frontend Docker build
  BUILD_VITE_API_URL: 'http://localhost:5000/api' # CHANGE THIS to your desired default/placeholder

jobs:
  lint-and-test:
    name: Lint & Test - ${{ matrix.service_config.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service_config:
          - name: agri-connect-frontend
            path: ./agri-connect-frontend
            cache_path: agri-connect-frontend/package-lock.json
            lint_script: lint
            test_env: {} # MODIFIED: Ensure test_env is always a map, even if empty
          - name: api-gateway
            path: ./backend2/api-gateway
            cache_path: backend2/api-gateway/package-lock.json
            # lint_script: # Define if you have one in api-gateway/package.json
            test_env: {} # MODIFIED: Ensure test_env is always a map, even if empty
          - name: auth-service
            path: ./backend2/auth-service
            cache_path: backend2/auth-service/package-lock.json
            # lint_script: # Define if you have one in auth-service/package.json
            test_env:
              NODE_ENV: test
              PORT: 5001
              MONGO_URI: mongodb://localhost:27017/test_auth_db_dummy
              JWT_SECRET: testjwtsecretforauthserviceci
              SESSION_SECRET: testsessionsecretforauthci
              REDIS_HOST: mockredis
              REDIS_PORT: 6379
              EMAIL_USER: test@example.com
              EMAIL_PASS: testpass
              GOOGLE_CLIENT_ID: testgoogleclientidci
              GOOGLE_CLIENT_SECRET: testgoogleclientsecretci
              GOOGLE_CALLBACK_URL: http://localhost:5000/api/auth/google/callback
              FRONTEND_URL: http://localhost:7000
          - name: main-service
            path: ./backend2/main-service
            cache_path: backend2/main-service/package-lock.json
            # lint_script: # Define if you have one in main-service/package.json
            test_env:
              NODE_ENV: test
              PORT: 5002
              MONGO_URI: mongodb://localhost:27017/test_main_db_dummy
              MYSQL_HOST: mockmysql
              MYSQL_USER: testuser
              MYSQL_PASSWORD: testpassword
              MYSQL_DATABASE: testdb_dummy
              JWT_SECRET: testjwtsecretformainserviceci
              AUTH_SERVICE_URL: http://mock-auth-service.test
              API_GATEWAY_PORT: 5000
              FRONTEND_URL: http://localhost:5173
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file structure for cache path
        if: matrix.service_config.name == 'agri-connect-frontend' || matrix.service_config.name == 'auth-service' || matrix.service_config.name == 'api-gateway' || matrix.service_config.name == 'main-service'
        run: |
          echo "--- Debug for ${{ matrix.service_config.name }} ---"
          echo "Current directory: $(pwd)"
          echo "Listing content of GITHUB_WORKSPACE (repo root):"
          ls -la ${{ github.workspace }}
          echo "Checking for specific cache_path: ${{ matrix.service_config.cache_path }}"
          if [ -f "${{ github.workspace }}/${{ matrix.service_config.cache_path }}" ]; then
            echo "Cache dependency path file FOUND: ${{ github.workspace }}/${{ matrix.service_config.cache_path }}"
          else
            echo "Cache dependency path file NOT FOUND: ${{ github.workspace }}/${{ matrix.service_config.cache_path }}"
            echo "Listing content of target service directory for the lock file: ${{ github.workspace }}/$(dirname ${{ matrix.service_config.cache_path }})"
            ls -la ${{ github.workspace }}/$(dirname ${{ matrix.service_config.cache_path }})
          fi
          echo "--- End Debug for ${{ matrix.service_config.name }} ---"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service_config.cache_path }}

      - name: Install Dependencies for ${{ matrix.service_config.name }}
        working-directory: ${{ matrix.service_config.path }}
        run: npm ci

      - name: Lint - ${{ matrix.service_config.name }}
        if: matrix.service_config.lint_script # Only runs if lint_script is defined and non-empty
        working-directory: ${{ matrix.service_config.path }}
        run: npm run ${{ matrix.service_config.lint_script }}
        # This step will fail the job if lint errors are present (e.g., for agri-connect-frontend)
        # To allow pipeline to continue despite lint errors, add: continue-on-error: true

      - name: Run Tests - ${{ matrix.service_config.name }}
        # Only run tests for services that have them (auth-service and main-service)
        if: matrix.service_config.name == 'auth-service' || matrix.service_config.name == 'main-service'
        working-directory: ${{ matrix.service_config.path }}
        env: ${{ matrix.service_config.test_env }} # This is now safe
        run: npm test

  build-and-push-images:
    name: Build & Push Docker Images to Docker Hub
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: lint-and-test # Only run if lint-and-test jobs succeed
    permissions:
      contents: read # Needed for checkout

    strategy:
      matrix:
        service_config:
          - name: agri-connect-frontend
            image_suffix: agri-connect-frontend
            path: ./agri-connect-frontend
            dockerfile: ./agri-connect-frontend/Dockerfile
          - name: api-gateway
            image_suffix: api-gateway
            path: ./backend2/api-gateway
            dockerfile: ./backend2/api-gateway/Dockerfile
          - name: auth-service
            image_suffix: auth-service
            path: ./backend2/auth-service
            dockerfile: ./backend2/auth-service/Dockerfile
          - name: main-service
            image_suffix: main-service
            path: ./backend2/main-service
            dockerfile: ./backend2/main-service/Dockerfile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service_config.image_suffix }}
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}

      - name: Build and push Docker image for ${{ matrix.service_config.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service_config.path }}
          file: ${{ matrix.service_config.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ${{ matrix.service_config.name == 'agri-connect-frontend' && format('VITE_API_URL={0}', env.BUILD_VITE_API_URL) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max