openapi: 3.0.3
info:
  title: Auth Service API
  description: API documentation for the Authentication Service of AgriConnect
  version: 1.0.0
servers:
  - url: http://localhost:5001
    description: Local development server
  - url: http://localhost:5000/api/auth
    description: API Gateway (proxied to Auth Service)
paths:
  /signup:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - userType
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
                userType:
                  type: string
                  enum: [Farmer, Buyer, Admin]
                  example: Farmer
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User with this email already exists
  /login:
    post:
      summary: Authenticate user and get token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email or password
  /logout:
    post:
      summary: Logout user and clear cookie
      tags:
        - Authentication
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully from AuthService
  /verify:
    get:
      summary: Verify JWT token
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Token invalid or failed verification
  /google:
    get:
      summary: Initiate Google OAuth login
      tags:
        - Authentication
      responses:
        '302':
          description: Redirects to Google OAuth consent screen
  /google/callback:
    get:
      summary: Google OAuth callback
      tags:
        - Authentication
      responses:
        '302':
          description: Redirects to frontend with user data and token
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the user
          example: 507f1f77bcf86cd799439011
        name:
          type: string
          description: Full name of the user
          example: John Doe
        email:
          type: string
          format: email
          description: User's email address (unique and lowercase)
          example: john.doe@example.com
        password:
          type: string
          format: password
          description: Hashed password (not returned in responses)
          example: $2a$12$...
        userType:
          type: string
          enum: [Farmer, Buyer, Admin]
          description: Type of user
          example: Farmer
        googleId:
          type: string
          description: Google OAuth ID (optional, unique if present)
          example: 1234567890
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: 2025-05-11T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
          example: 2025-05-11T12:00:00Z
      required:
        - name
        - email
        - userType